// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
    CUSTOMER
    EMPLOYEE
    CORPORATE
}

enum SessionStatus {
    ABANDONED
    ACTIVE
    ENDED
    EXPIRED
    REMOVED
    REPLACED
    REVOKED
}

enum Role {
    ADMIN
    MANAGER
    DEVELOPER
}

enum StoreType {
    AGENT
    FRANCHISE
}

model User {
    id               String            @id
    userType         UserType
    customerAccount  CustomerAccount?
    employeeAccount  EmployeeAccount?
    corporateAccount CorporateAccount?
    reference        Reference[]
    sessions         Session[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    Notification     Notification[]
}

model Session {
    id     String        @id
    userId String
    status SessionStatus
    user   User          @relation(fields: [userId], references: [id])
}

model CustomerAccount {
    id              String                     @id
    orders          Order[]
    user            User                       @relation(fields: [id], references: [id])
    phoneUploadLink OnboardingPhoneUploadLink?
    CustomerComment CustomerComment[]
    CustomerNote    CustomerNote[]
}

model EmployeeAccount {
    id                String    @id
    user              User      @relation(fields: [id], references: [id])
    employeeRole      Role
    employeeStoreType StoreType
}

model CorporateAccount {
    id   String @id
    user User   @relation(fields: [id], references: [id])
}

model PendingAccount {
    id          Int      @id @default(autoincrement())
    email       String   @unique
    accountType UserType
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model OnboardingPhoneUploadLink {
    id         String   @id @default(cuid())
    customerId String   @unique
    expiresAt  DateTime
    completed  Boolean  @default(false)

    Customer  CustomerAccount @relation(fields: [customerId], references: [id])
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

model Location {
    id        Int      @id @default(autoincrement())
    name      String
    address   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    LocationComment LocationComment[]
    locationNote    LocationNote[]
    Order           Order[]
}

model LocationComment {
    id         String      @id @default(cuid())
    text       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    location   Location    @relation(fields: [locationId], references: [id])
    references Reference[]
    images     String[]

    locationId   Int
    Notification Notification[]
}

model LocationNote {
    id         String   @id @default(cuid())
    text       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    location   Location @relation(fields: [locationId], references: [id])
    locationId Int
}

model Order {
    id                Int             @id @default(autoincrement())
    customerId        String
    vendorOrderId     String
    total             Float
    shippedLocationid Int
    delivered         DateTime?
    customer          CustomerAccount @relation(fields: [customerId], references: [id])
    shippedLocation   Location        @relation(fields: [shippedLocationid], references: [id])
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt

    orderComment OrderComment[]
    OrderNote    OrderNote[]
}

model OrderComment {
    id         String      @id @default(cuid())
    text       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    order      Order       @relation(fields: [orderId], references: [id])
    references Reference[]
    images     String[]

    orderId      Int
    Notification Notification[]
}

model OrderNote {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    order     Order    @relation(fields: [orderId], references: [id])

    orderId Int
}

model CustomerComment {
    id                String          @id @default(cuid())
    text              String
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    customer          CustomerAccount @relation(fields: [customerAccountId], references: [id])
    references        Reference[]
    images            String[]
    customerAccountId String
    Notification      Notification[]
}

model CustomerNote {
    id        String          @id @default(cuid())
    text      String
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    customer  CustomerAccount @relation(fields: [customerAccountId], references: [id])

    customerAccountId String
}

model Reference {
    id               String @id @default(cuid())
    commentId        String
    referencedUserId String

    referencedUser    User             @relation(fields: [referencedUserId], references: [id])
    OrderComment      OrderComment?    @relation(fields: [orderCommentId], references: [id])
    orderCommentId    String?
    customerCommentId String?
    CustomerComment   CustomerComment? @relation(fields: [customerCommentId], references: [id])
    locationCommentId String?
    LocationComment   LocationComment? @relation(fields: [locationCommentId], references: [id])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    OrderComment      OrderComment?    @relation(fields: [orderCommentId], references: [id])
    orderCommentId    String?
    customerCommentId String?
    CustomerComment   CustomerComment? @relation(fields: [customerCommentId], references: [id])
    locationCommentId String?
    LocationComment   LocationComment? @relation(fields: [locationCommentId], references: [id])

    user User @relation(fields: [userId], references: [id])
}
