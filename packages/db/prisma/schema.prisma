generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String                 @id
    userType             UserType
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    corporateAccount     CorporateAccount?
    customerAccount      CustomerAccount?
    employeeAccount      EmployeeAccount?
    notifications        Notification[]
    sessions             Session[]
    UserFavoriteLocation UserFavoriteLocation[]
    Comment              Comment[]
}

model Session {
    id     String        @id
    userId String
    status SessionStatus
    user   User          @relation(fields: [userId], references: [id])
}

model CustomerAccount {
    id               String                     @id
    user             User                       @relation(fields: [id], references: [id])
    firstName        String?
    lastName         String?
    email            String?
    phoneNumber      String?
    shippingAddress  String?
    customerComments CustomerComment[]
    customerNotes    CustomerNote[]
    phoneUploadLink  OnboardingPhoneUploadLink?
    orders           Order[]
}

model EmployeeAccount {
    id               String            @id
    employeeRole     EmployeeRole
    locationId       Int
    user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
    location         Location          @relation(fields: [locationId], references: [id])
    employeeComments EmployeeComment[]
    employeeNotes    EmployeeNote[]
}

model CorporateAccount {
    id   String @id
    user User   @relation(fields: [id], references: [id])
}

// TODO: This holds pending account creation for Employees and Corporate. 
// Add an optional field for Employee Role, if the Pending Account is an Employee UserType. Modify the webhook accordingly.
model PendingAdminAccount {
    id          Int      @id @default(autoincrement())
    email       String   @unique
    accountType UserType
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model OnboardingPhoneUploadLink {
    id         String          @id @default(cuid())
    customerId String          @unique
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    expiresAt  DateTime
    completed  Boolean         @default(false)
    customer   CustomerAccount @relation(fields: [customerId], references: [id])
}

model Order {
    id                Int             @id @default(autoincrement())
    customerId        String
    vendorOrderId     String
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    total             Float
    shippedLocationId Int
    deliveredDate     DateTime?
    pickedUpAt        DateTime?
    processedAt       DateTime?
    customer          CustomerAccount @relation(fields: [customerId], references: [id])
    shippedLocation   Location        @relation(fields: [shippedLocationId], references: [id])
    orderComments     OrderComment[]
}

model Location {
    id              Int          @id @default(autoincrement())
    name            String
    address         String
    storageCapacity Int          @default(500)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    locationType    LocationType

    locationComments LocationComment[]
    locationNotes    LocationNote[]
    orders           Order[]
    employeeAccounts EmployeeAccount[]
    favoritedBy      UserFavoriteLocation[]
}

model Note {
    id           String        @id @default(cuid())
    text         String
    createdAt    DateTime
    updatedAt    DateTime
    noteType     NoteType
    customerNote CustomerNote?
    employeeNote EmployeeNote?
    locationNote LocationNote?
    // storeNotes TODO: ADD WHEN STORE PAGE IS IMPLEMENTED
}

model LocationNote {
    id         String   @unique
    locationId Int
    note       Note     @relation(fields: [id], references: [id])
    location   Location @relation(fields: [locationId], references: [id])
}

model CustomerNote {
    id         String          @unique
    customerId String
    customer   CustomerAccount @relation(fields: [customerId], references: [id])
    note       Note            @relation(fields: [id], references: [id])
}

model EmployeeNote {
    id         String          @unique
    employeeId String
    employee   EmployeeAccount @relation(fields: [employeeId], references: [id])
    note       Note            @relation(fields: [id], references: [id])
}

model Comment {
    id          String      @id @default(cuid())
    text        String
    authorId    String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    commentType CommentType
    // storeComments TODO: ADD WHEN STORE PAGE IS IMPLEMENTED
    filePaths   String[]

    author          User             @relation(fields: [authorId], references: [id])
    customerComment CustomerComment?
    employeeComment EmployeeComment?
    locationComment LocationComment?
    notifications   Notification[]
    orderComment    OrderComment?
}

model LocationComment {
    id         String   @unique
    locationId Int
    comment    Comment  @relation(fields: [id], references: [id], onDelete: Cascade)
    location   Location @relation(fields: [locationId], references: [id])
}

model EmployeeComment {
    id                String          @unique
    employeeAccountId String
    employee          EmployeeAccount @relation(fields: [employeeAccountId], references: [id])
    comment           Comment         @relation(fields: [id], references: [id], onDelete: Cascade)
}

model CustomerComment {
    id                String          @unique
    customerAccountId String
    customer          CustomerAccount @relation(fields: [customerAccountId], references: [id])
    comment           Comment         @relation(fields: [id], references: [id], onDelete: Cascade)
}

model OrderComment {
    id      String  @unique
    orderId Int
    comment Comment @relation(fields: [id], references: [id], onDelete: Cascade)
    order   Order   @relation(fields: [orderId], references: [id])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    message   String
    read      Boolean  @default(false)
    commentId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    comment   Comment? @relation(fields: [commentId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}

model UserFavoriteLocation {
    id         String   @id @default(cuid())
    userId     String
    locationId Int
    isPrimary  Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

    @@unique([userId, locationId])
    @@index([userId])
    @@index([locationId])
}

enum UserType {
    CUSTOMER
    EMPLOYEE
    CORPORATE
}

enum CommentType {
    EMPLOYEE
    LOCATION
    CUSTOMER
    ORDER
}

enum NoteType {
    EMPLOYEE
    LOCATION
    CUSTOMER
}

enum SessionStatus {
    ABANDONED
    ACTIVE
    ENDED
    EXPIRED
    REMOVED
    REPLACED
    REVOKED
}

enum EmployeeRole {
    MANAGER
    ASSOCIATE
}

enum LocationType {
    AGENT
    FRANCHISE
}
